export enum NodeTypes {
  FRAME = "FRAME",
  COMPONENT = "COMPONENT",
  INSTANCE = "INSTANCE",
  GROUP = "GROUP",
  TEXT = "TEXT",
  PAGE = "PAGE",

  VECTOR = "VECTOR",
  RECTANGLE = "RECTANGLE",
  ELLIPSE = "ELLIPSE",
  LINE = "LINE",
  POLYGON = "POLYGON",
  STAR = "STAR",
}

export enum NodeKeys {
  TYPE = "type",
  NAME = "name",
  ORIGINAL_REF = "originalRef",
  ID = "id",
  PARENT = "parent",
  TEXT_ALIGN_HORIZONTAL = "textAlignHorizontal",
  TEXT_ALIGN_VERTICAL = "textAlignVertical",
  TEXT_AUTO_RESIZE = "textAutoResize",
  PARAGRAPH_INDENT = "paragraphIndent",
  PARAGRAPH_SPACING = "paragraphSpacing",
  CHARACTERS = "characters",
  FONT_SIZE = "fontSize",
  FONT_NAME = "fontName",
  TEXT_CASE = "textCase",
  TEXT_DECORATION = "textDecoration",
  LETTER_SPACING = "letterSpacing",
  LINE_HEIGHT = "lineHeight",
  FILLS = "fills",
  STROKE_WEIGHT = "strokeWeight",
  DASH_PATTERN = "dashPattern",
  TOP_LEFT_RADIUS = "topLeftRadius",
  TOP_RIGHT_RADIUS = "topRightRadius",
  BOTTOM_LEFT_RADIUS = "bottomLeftRadius",
  BOTTOM_RIGHT_RADIUS = "bottomRightRadius",
  OPACITY = "opacity",
  EFFECTS = "effects",
  ROTATION = "rotation",
  WIDTH = "width",
  HEIGHT = "height",
  LAYOUT_ALIGN = "layoutAlign",
  CONSTRAINTS = "constraints",
  LAYOUT_GROW = "layoutGrow",

  LAYOUT_MODE = "layoutMode",
  PRIMARY_AXIS_SIZING_MODE = "primaryAxisSizingMode",
  COUNTER_AXIS_SIZING_MODE = "counterAxisSizingMode",
  PRIMARY_AXIS_ALIGN_ITEMS = "primaryAxisAlignItems",
  COUNTER_AXIS_ALIGN_ITEMS = "counterAxisAlignItems",
  PADDING_LEFT = "paddingLeft",
  PADDING_RIGHT = "paddingRight",
  PADDING_TOP = "paddingTop",
  PADDING_BOTTOM = "paddingBottom",
  ITEM_SPACING = "itemSpacing",
  STROKES = "strokes",
  CLIPS_CONTENT = "clipsContent",
}

export const ACCEPTED_KEYS = {
  CHILDREN: "children",
  COMMON: [
    NodeKeys.TYPE,
    NodeKeys.NAME,
    NodeKeys.ORIGINAL_REF,
    NodeKeys.ID,
    NodeKeys.PARENT,
  ],
  FRAME: [
    NodeKeys.LAYOUT_MODE,
    NodeKeys.PRIMARY_AXIS_SIZING_MODE,
    NodeKeys.COUNTER_AXIS_SIZING_MODE,
    NodeKeys.PRIMARY_AXIS_ALIGN_ITEMS,
    NodeKeys.COUNTER_AXIS_ALIGN_ITEMS,
    NodeKeys.PADDING_LEFT,
    NodeKeys.PADDING_RIGHT,
    NodeKeys.PADDING_TOP,
    NodeKeys.PADDING_BOTTOM,
    NodeKeys.ITEM_SPACING,
    NodeKeys.STROKES,
    NodeKeys.CLIPS_CONTENT,
    NodeKeys.FILLS,
    NodeKeys.STROKE_WEIGHT,
    NodeKeys.DASH_PATTERN,
    NodeKeys.TOP_LEFT_RADIUS,
    NodeKeys.TOP_RIGHT_RADIUS,
    NodeKeys.BOTTOM_LEFT_RADIUS,
    NodeKeys.BOTTOM_RIGHT_RADIUS,
    NodeKeys.OPACITY,
    NodeKeys.EFFECTS,
    NodeKeys.ROTATION,
    NodeKeys.WIDTH,
    NodeKeys.HEIGHT,
    NodeKeys.LAYOUT_ALIGN,
    NodeKeys.CONSTRAINTS,
    NodeKeys.LAYOUT_GROW,
  ],
  GROUP: [
    NodeKeys.OPACITY,
    NodeKeys.EFFECTS,
    NodeKeys.ROTATION,
    NodeKeys.WIDTH,
    NodeKeys.HEIGHT,
    NodeKeys.LAYOUT_ALIGN,
    NodeKeys.CONSTRAINTS,
    NodeKeys.LAYOUT_GROW,
  ],
  TEXT: [
    NodeKeys.TEXT_ALIGN_HORIZONTAL,
    NodeKeys.TEXT_ALIGN_VERTICAL,
    NodeKeys.TEXT_AUTO_RESIZE,
    NodeKeys.PARAGRAPH_INDENT,
    NodeKeys.PARAGRAPH_SPACING,
    NodeKeys.CHARACTERS,
    NodeKeys.FONT_SIZE,
    NodeKeys.FONT_NAME,
    NodeKeys.TEXT_CASE,
    NodeKeys.TEXT_DECORATION,
    NodeKeys.LETTER_SPACING,
    NodeKeys.LINE_HEIGHT,
    NodeKeys.STROKES,
    NodeKeys.CLIPS_CONTENT,
    NodeKeys.FILLS,
    NodeKeys.STROKE_WEIGHT,
    NodeKeys.OPACITY,
    NodeKeys.EFFECTS,
    NodeKeys.ROTATION,
    NodeKeys.WIDTH,
    NodeKeys.HEIGHT,
    NodeKeys.LAYOUT_ALIGN,
    NodeKeys.CONSTRAINTS,
    NodeKeys.LAYOUT_GROW,
  ],
  VECTOR: [
    NodeKeys.WIDTH,
    NodeKeys.HEIGHT,
    NodeKeys.ROTATION,
    NodeKeys.LAYOUT_ALIGN,
    NodeKeys.CONSTRAINTS,
    NodeKeys.LAYOUT_GROW,
  ],
};

export const VECTOR_EXPORT_OPTIONS = {
  SVG: {
    mimeType: "image/svg+xml",
    format: "SVG",
  },
  PNG: {
    mimeType: "image/png",
    format: "PNG",
  },
  JPG: {
    mimeType: "image/jpeg",
    format: "JPG",
  },
};
